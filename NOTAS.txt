###CLASE_1 --->rpiemr linea de codigo
	en chrome about:blank
	inspeccionar
	ir a consola
	y escribir linea a linea 
		alert("camilo")
		undefined
		var nombre = "camilo"
		undefined
		nombre
		'camilo'
		alert("mi nombre es " + nombre)
		undefined
		nombre = "Juana la alpaca"
		'Juana la alpaca'
		alert("mi nombre es " + nombre)	
		undefined
		nombre =prompt ("cual es tu nombre?")
		'camilocarrillo'
		alert("mi nombre es " + nombre)
		undefined
		
###CLASE_2 ---> Que es HTML/CSS/JS
		HTML: Hyper Text Marca Text y es un texto plano y estructura informacion
		
			dentro de HTML está:
				CSS -->Diseño del HTML, es posile inteactuar,todo es de forma
						visual. 
				JS --> Es realmente la programacion, controla cada botón
					que hay en la pagina etc. 
		
		El navegador se encarga de interpretar a los tres anteriores. 
		
		
###CLASE_#3 -->JS NO ES JAVA
	JS: WEB, SERVIDOR,NODEJS,ROBOTS
	JAVA: SERVIDORES, ORACLE,SERVER,BANCOS,ANDROID
	
###CLASE_4 PRIMEROS PASOS EN EL NAVEGADOR
	En consola de google se puede escribir JS.
	escribir:
		alert("hola camilo");
		var x=1;
		var y=2;
		var z=x+y;
			{las comillas son para identifcar un string}
			En JS el ; significa fin de instruccion excepcion el bloque code
	Var = declara la existencia de una variable en memoria
	
###CLASE_5 --> HTML, CSS, JavaScript de verdad
	Se creó un archivo HTML. se guardó en la carpeta del curso :) primero.html
	LOS ARCHIVOS DE DISEÑO SIEMPRE SE HACE EN OTRO ARCHIVO
	
	JS SE AGREGA ANTES DE CERRAR BODY, PORQUE DEBE EJECUTARSE CUANDO YA TODO ESTÁ
	EN PANTALLA.(SOLO CUANDO SE APRENDE)
		document.write("mensaje especial con alerta"); me permite escribir 
		js en html en el punto donde se pone la linea del codigo. 
		REGLAS PARA VARIABLES JS:
			- no inicia con numero
			- no dejar espacios
			- distingue mayus y minus
		<style type="text/css">
		<script typer="text/javascript">
		Estos anteriores para difereir o aclarar codigo de que pertenece
###CLASE_6 ---> PESO EN OTRO PLANETA
	
		g=9.8m/s
		g en marte =3.7
		g en jupiter=24.8
		Crear un algoritmo donde ingrese su peso y te arroje el peso
		en otro planeta 
		se crea archivo marte.html
###CLASE_8 ----> OBTENIENDO DATOS DEL USUARIO
	var usuario = prompt("Cual es tu peso") nos trae u archivo string
	var planeta = parseInt(prompt("Elige tu planeta\n 1 es marte 2 es Jupiter"))
		el anterior con parseInt(Nos genera un tipo entero)y asi
		poder trabajar operaciones con el mismo.

###CLASE_9 ---> FLUJO Y CONDICIONALES
	Se crea un archivo con condicionales y flujo de variables
	concatenando int + string
	NO CREAMOS UN NUEVO ARCHIVO PERO SI UN COMMIT NUEVO EN EL REPO
	
###CLASE_10 --->  DOM: Nuestro lugar de trabajo
	
	objetos: son onmrbes especiales que tienen por dentro funciones
	atributos etc.
	
	uso de objetos que tiene el navegador. 
		obejtos nativos del navegador
			- el navegdor
			- pestañas (tabs)
			- contenido de pagina (((hablando de JS)))
				*document(contenido de la pagina) tiene cada uno de los 
					elementos de la pagina web,c ontrola todo su contenido
					concepto /DOCUMENT OBJECT MODEL DOM es la fomra en que 
					el navegador organiza el html dentro de una estructutra
					especial donde podemos manejar sin problema nuestro html.
					un arbol: 	HTML
								/	\
							HEAD	BODY
							/			\
						TITTLE		h1,p,script
						
				*window (accedes a las prpiedades de las tabs)obejtos
					que maneja cada uno de los tabs.
				*navigator (Acceder a las opciones del navegador)
					capacidades especiales del navegador y el S.O.
					
###CLASE_11--->COMO FUNCIONAN WINDOW Y DOCUMENT
	-document.write("Hola estudiante"); write es una funcion del objeto document
		*cuando las funciones son parte de un objeto se llaman METODOS
		* cuando la variable es parte de un objeto se llama ATRIBUTO/PROPIEDAD
	- var ruta = window.location; Location es un atributo o propiedad del window.
	- console.log: para reparar errores/// me deja mensajes en consola.
					Es una herramienta para ver los objetos.
					*console es el objeto y log el metodo*
	independizamos el archivo JS y HTML, AHORA A DIBUJAR

####CLASE_12 --> DIBUJANDO EN EL DOM
	
	Etiqueta CANVAS es para dibujar en JS. <canvas>
	Solo se puede por JS no por HTML
	
	Entonces, Se crea una carpeta que contenga dos archivos
	un html y otro JS. 
	Desde el HTML se crea el obejto canvas con id "dibujo"
	Y es llamada desde el JS que es donde se dibuja
	Se almacena en una variable obteniendola con el siguiente condigo
	#var d = document.getElementById("dibujito");
	Y enseguida se obteiene el conexto del canvas con el siguiente codigo
		#var lienzo = d.getContext("2d");
	Es ahi donde ya podemos dibujar. 
	para una linea:
		lienzo.beginPath(); //inciia trazado
		lienzo.strokeStyle = "red"; // Escoge color "atributo"
		lienzo.moveTo(100,100); //Inicia dibujo
		lienzo.lineTo(200,200); // traza linea
		lienzo.stroke(); // atributo de lapiz
		lienzo.closePath(); // fin del trazado

##CLASE_13 QUE SON LAS FUNCIONES EN EL JS
	FUNCION ES: CUANDO SE RE USA UN CODIGO
	
	creamos la funcion de linea de la siguiente manera:
function dibujarLinea(color,xinicial,yinicial,xfinal,yfinal)
{
    lienzo.beginPath(); //inciia trazado
    lienzo.strokeStyle = color; // Escoge color "atributo"
    lienzo.moveTo(xinicial,yinicial); //Inicia dibujo
    lienzo.lineTo(xfinal,yfinal); // traza linea
    lienzo.stroke(); // atributo de lapiz
    lienzo.closePath(); // fin del trazado
}
	SE INVOCA DE LA SIGUIENTE MANERA:
		dibujarLinea("blue",300,300,100,10);
		
###CLASE_14 ---> CICLOS WHILE Y FOR EN JS
		SE REALIZA CICLOS PARA DIBUJAR LINEAS EN EJES
		CON WHILE: 
			DECLARANDO ANTERIORMENTE LAS VARIABLES	
while(l < lineas)
{
    xi = 10 * l;
    yf = 10 * (l + 1);
    dibujarLinea("green",xi,0,0,yf);
    l ++;
		CON FOR:
for (l = 0;l < lineas;l++)
{
    yi = 10 * l;
    xf = 10 * (l + 1);
    dibujarLinea("green",0,yi,xf,300);
    l ++;
}
###CLASE_15---> EVENTOS Y FONMULARIOS EN HTML Y JS
	EVENTOS: SON FUNCIONES QUE SE DISPARAN CUANDO ALGO OCURRE
		EL MAS COMUN ES EL CLICK, TECLADO ETC.
		UTF-8 AGREGA TILDES
		INPUT TEXTO DE FOMRULARIOS
		id IDENTIFICAMOS UNA EAUIQETA DE HTML PARA TRABAJR EN JS

####CLASE_16 ---> DETECTAR EVENTOS DEL TECLADO CON JS

	
	git reset nos permite volver a la version anterior.
	hard : Nos regresa tooodo hasta allá
	soft : Nos conserva en el staying
	
	Ahora para ver un commit anterior escribimos
	git checkout idCommit Archivo.ext //
	Si queremos volverlo permanente, entonces 
	git add
	git commit
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	